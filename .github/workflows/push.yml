# this workflow will run on all pushes.
on:
  push:

name: "push"
jobs:
  # run golangci-lint to lint the golang source code.
  # the configuration is at /.golangci.yml.
# disable for now
#  linter:
#    runs-on: ubuntu-latest
#    steps:
#      -
#        uses: actions/checkout@v3.5.0
#      -
#        name: Get go.mod details
#        uses: Eun/go-mod-details@v1.0.6
#        id: go-mod-details
#      -
#        name: Install Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: ${{ steps.go-mod-details.outputs.go_version }}
#      -
#        name: lint
#        uses: golangci/golangci-lint-action@v3.1.0
#        with:
#          version: latest
#          # optional: show only new issues if it's a pull request. The default value is `false`.
#          # only-new-issues: true

  # use nancy to scan for vulnerabilities.
  vulnerability_scanner:
    name: Vulnerability scanner
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v3.5.0
      -
        uses: actions/setup-go@v4
      # we cannot use nancy-github-action because it is outdated, so it's better to use the latest
      # docker image for the validation
      -
        name: nancy
        run: go list -json -m all | docker run -i sonatypecommunity/nancy:latest

  # run golang test suite and collect their coverage.
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3.5.0
      -
        name: Get go.mod details
        uses: Eun/go-mod-details@v1.0.6
        id: go-mod-details
      -
        name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-mod-details.outputs.go_version }}
      -
        name: Test
        run: go test -v -count=1 -coverprofile="coverage-${{ matrix.platform }}-${{ steps.go-mod-details.outputs.go_version }}.cov" -covermode=atomic -run ^Test_Pipeline$ ./...

  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3.5.0
      -
        name: Get go.mod details
        uses: Eun/go-mod-details@v1.0.6
        id: go-mod-details
      -
        name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-mod-details.outputs.go_version }}
      -
        name: GoReleaser
        uses: goreleaser/goreleaser-action@v4.2.0
        with:
          version: latest
          args: build --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # draft your next release notes as pull requests are merged into "master"
  # the configuration is at /.github/release-drafter.yml.
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        if: github.ref_name == github.event.repository.master_branch
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
